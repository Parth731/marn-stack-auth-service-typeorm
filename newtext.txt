import globals from 'globals';
import pluginJs from '@eslint/js';
import tseslint from 'typescript-eslint';
import eslintPluginPrettier from 'eslint-plugin-prettier';

/** @type {import('eslint').Linter.Config[]} */
export default [
    { files: ['**/*.{js,mjs,cjs,ts}'] },
    pluginJs.configs.recommended,
    eslintPluginPrettier,
    {
        extends: [
            'eslint:recommended',
            'plugin:@typescript-eslint/recommended',
            'plugin:node/recommended',
            'plugin:prettier/recommended',
        ],
        env: {
            node: true,
            es2021: true,
        },
        languageOptions: {
            parser: '@typescript-eslint/parser',
            globals: globals.node,
            parserOptions: {
                parserOptions: {
                    ecmaVersion: 2021, // Supports modern JavaScript syntax
                    sourceType: 'module', // Use "script" for CommonJS
                },
            },
        },
        ignores: ['dist', 'node_modules'],
        rules: {
            '@typescript-eslint/no-unused-vars': ['warn'],
            '@typescript-eslint/explicit-function-return-type': 'off',
            // Node.js specific rules
            'node/no-unsupported-features/es-syntax': [
                'error',
                { ignores: ['modules'] }, // Allows ES modules if you're using them
            ],
            'node/no-extraneous-require': 'error', // Disallow importing packages not in `package.json`
            'node/no-missing-require': 'error', // Ensure required modules exist

            // Promise best practices
            'promise/catch-or-return': 'error', // Enforce handling of rejected promises
            'promise/no-return-wrap': 'error', // Disallow unnecessary `Promise.resolve` or `Promise.reject`

            // Security rules
            'security/detect-object-injection': 'warn', // Warn against potential object injection
            'security/detect-non-literal-fs-filename': 'warn', // Prevent unsafe file paths

            // Prettier integration
            'prettier/prettier': 'error', // Treat Prettier formatting issues as ESLint errors

            // Import rules
            'import/no-unresolved': 'error', // Ensure imports point to existing modules/files
            'import/order': [
                'error',
                {
                    groups: [
                        ['builtin', 'external'],
                        'internal',
                        ['parent', 'sibling'],
                        'index',
                    ],
                    'newlines-between': 'always',
                },
            ],

            // Miscellaneous
            'no-console': 'error', // Warn on `console.log`, but don't error
            'no-unused-vars': ['warn', { argsIgnorePattern: '^_' }], // Ignore unused arguments prefixed with `_`
            eqeqeq: ['error', 'always'], // Enforce strict equality
        },
        overrides: [
            {
                files: ['*.test.js', '*.spec.js'], // Test files
                env: {
                    mocha: true, // If you're using Mocha, or use `jest` for Jest
                },
                rules: {
                    'no-unused-expressions': 'off', // Disable for test assertions like `expect(foo).to.be.true`
                },
            },
        ],
        plugins: [
            'node',
            'promise',
            'security',
            'prettier',
            'import',
            '@typescript-eslint',
        ],
    },
    pluginJs.configs.recommended,
    ...tseslint.configs.recommended,
];
----------------------------------------

https://medium.com/geekculture/eslint-with-node-js-in-simple-words-cee0a0cf9167

-----------------------------------------------

"rules": {
    /* --- GENERAL CODE QUALITY RULES --- */
    "semi": ["error", "always"], // Enforce semicolons
    "quotes": ["error", "single", { "avoidEscape": true }], // Prefer single quotes
    "no-unused-vars": "off", // Turn off in favor of @typescript-eslint/no-unused-vars
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }], // Allow unused args with `_`
    "eol-last": ["error", "always"], // Enforce newline at the end of files
    "no-console": "warn", // Warn when console statements are used
    "prefer-const": "error", // Suggest using `const` wherever possible
    "no-var": "error", // Disallow usage of `var`
    "eqeqeq": ["error", "smart"], // Enforce `===` and `!==`, but allow `== null`
    "no-empty-function": "off", // Turn off in favor of TypeScript's rule
    "@typescript-eslint/no-empty-function": ["warn"], // Warn for empty functions

    /* --- TYPESCRIPT-SPECIFIC RULES --- */
    "@typescript-eslint/explicit-function-return-type": ["warn", { "allowExpressions": true }], // Enforce return type declarations
    "@typescript-eslint/no-explicit-any": "warn", // Discourage `any` type but not strict
    "@typescript-eslint/no-inferrable-types": ["error"], // Avoid explicit types where they can be inferred
    "@typescript-eslint/no-floating-promises": ["error"], // Ensure promises are handled properly

    /* --- FUNCTION & STYLE RULES --- */
    "func-style": ["error", "expression"], // Enforce functional expressions over declarations
    "arrow-body-style": ["error", "as-needed"], // Enforce concise arrow functions
    "max-lines-per-function": ["warn", { "max": 50, "skipComments": true }], // Keep functions concise
    "consistent-return": "error", // Enforce consistent return in functions
    "@typescript-eslint/no-misused-promises": "error", // Avoid common promise misuse
    "no-useless-return": "error", // Disallow unnecessary `return` statements

    /* --- IMPORT RULES --- */
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index", "object", "type"],
        "newlines-between": "always",
        "alphabetize": { "order": "asc", "caseInsensitive": true }
      }
    ],
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }], // Prevent importing unnecessary dependencies
    "import/newline-after-import": ["error", { "count": 1 }], // Enforce new lines after imports

    /* --- NODE-SPECIFIC RULES --- */
    "node/no-unsupported-features/es-syntax": ["off"], // Allow modern ES syntax in Node.js
    "node/no-unpublished-import": "off", // Allow importing types and dev dependencies
    "node/no-missing-import": ["error", { "tryExtensions": [".ts", ".js", ".json"] }], // Handle TypeScript file extensions properly

    /* --- PROMISE RULES --- */
    "promise/always-return": "error", // Ensure promises always return something
    "promise/catch-or-return": "error", // Require `catch` for unhandled promises

    /* --- OPTIONAL RULES FOR STRICT CODE STYLE --- */
    "@typescript-eslint/explicit-member-accessibility": ["error", { "overrides": { "constructors": "no-public" } }], // Control access modifiers
    "@typescript-eslint/member-ordering": ["error", { "default": ["field", "constructor", "method"] }] // Enforce member ordering
  }

  ------------------------------------------------------------------------------

  import globals from 'globals';
import pluginJs from '@eslint/js';
import tseslint from 'typescript-eslint';

/** @type {import('eslint').Linter.Config[]} */
export default [
  { files: ['**/*.{js,mjs,cjs,ts}'] },
  {
    languageOptions: {
      globals: { ...globals.browser, ...globals.node },
      parser: '@typescript-eslint/parser',
      parserOptions: {
        ecmaVersion: 2021, // Supports modern JavaScript syntax
        sourceType: 'module', // Use "script" for CommonJS
      },
    },
    settings: {
      'import/resolver': {
        typescript: {}, // This ensures TypeScript files are resolved correctly
      },
    },

    rules: {
      //* ES6
      'arrow-spacing': 'error',
      'no-confusing-arrow': 'error',
      'no-duplicate-imports': 'error',
      'no-var': 'error',
      'object-shorthand': 'off',
      'prefer-const': 'error',
      'prefer-template': 'warn',
      'no-require-imports': 'off',

      'no-console': 'off',
      'dot-notation': 'error',
      // '@typescript-eslint/require-await': 'off',
      // '@typescript-eslint/no-unsafe-assignment': 'off',

      //* Avoid Bugs
      'no-undef': 'error',
      semi: 'error',
      'semi-spacing': 'error',

      //* Best Practices
      eqeqeq: 'warn',
      'no-invalid-this': 'error',
      'no-return-assign': 'error',
      'no-unused-expressions': ['error', { allowTernary: true }],
      'no-useless-concat': 'error',
      'no-useless-return': 'error',
      'no-constant-condition': 'warn',
      'no-unused-vars': 'warn',

      // Function parameter-specific rules
      // '@typescript-eslint/explicit-module-boundary-types': 'error', // Require explicit types for exported functions and parameters
      // '@typescript-eslint/parameter-properties': [
      //   'error',
      //   {
      //     prefer: 'class-property',
      //   },
      // ],
      // '@typescript-eslint/no-empty-function': 'warn', // Warn against empty functions
    },
  },
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
];

----------------------------------------------------------------------------------

docker command 

- docker build -t auth-service:dev -f docker\development\Dockerfile .

- docker run --name auth-service-container --rm -it -v "${PWD}:/auth-service/src/app" -v /auth-service/src/app/node_modules --env-file "${PWD}/.env" -p 5502:5502 -e NODE_ENV=development -e PORT=5502 auth-service:dev

- docker ps

- docker stop <container_ID> or <container_name>

- https://codersgyan.notion.site/Setting-up-PostgreSQL-in-a-Docker-Container-with-Persistent-Volume-58711388eb244c9fa1597d87783e3f92



----------------------------

Database setup

- docker pull postgres
- docker pull mongo
- docker volume create mernpgdata
- docker volume create mernMongoData
- docker volume ls

- docker run --rm --name mernpg-container -e POSTGRES_USER=root -e POSTGRES_PASSWORD=root -v mernpgdata:/var/lib/postgresql/data -p 5432:5432 -d postgres

- docker run --rm --name mernMongo-container -e MONGODB_USERNAME=parthdangroshiya13 -p 27017:27017 -e MONGODB_PASSWORD=cxxWyaLlXS6MNF39 -e MONGODB_DB=mern-pizza-app -e MONGODB_HOST=mongocluster  -v mernMongoData:/data/db -d mongo

- https://icegreeen.medium.com/a-simple-guide-to-setting-up-a-project-with-node-js-typescript-postgres-and-typeorm-c5550bf1f4f0

